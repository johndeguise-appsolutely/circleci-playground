version: 2.1

orbs:
  slack: circleci/slack@4.3.1

parameters:
  default_packageid: # ToDo: Would try to obtain directly from project if possible, if not convert into project-specific file
    description: The package id (starts with 0Ho). Copy it from the sfdx-project.json.
    type: string
    default: $PROJECT_PACKAGE_ID
  default_slack_channel_id: # ToDo: convert into project-specific file
    description: |
      The id of the slack channel the build script reports its progress on. You can easily obtain the Slack channel ID
      by right clicking, and copying a link to the channel. The ID will be visible at the end of the URL.
    type: string
    default: $PROJECT_SLACK_CHANNEL_ID
  default_hammer_test_slack_channel_id:
    description: |
      The id of the slack channel on which to report the hammer test results. Hammer tests results are reported centrally
      to ensure the results are treated appropriate. You can easily obtain the Slack channel ID
      by right clicking, and copying a link to the channel. The ID will be visible at the end of the URL.
    type: string
    default: hammertest
  github_username:
    description: A potentially fake github username to use to write to the repo. You authenticate through the user key for the project so this is purely used to show who pushes to github.
    type: string
    default: CircleCI
  github_email:
    description: A potentially fake github email address to use to write to the repo. You authenticate through the user key for the project so this is purely used to show who pushes to github.
    type: string
    default: circleci@appsolutely.nl
  packaging_scratch_org_definition_file:
    description: "the scratch org definition file used to build the package version. Should define all the right org shape/dependencies/features needed for the package"
    type: string
    default: "config/package-scratch-def.json"
  preview_packaging_scratch_org_definition_file:
    description: "the scratch org definition file used to build the package version on a preview version of salesforce. Used in the hammer test."
    type: string
    default: "config/preview-package-scratch-def.json"
  beta_test_scratch_org_definition_file:
    description: "the enterprise edition scratch org definition file used to install the beta. Should define all the right org shape/dependencies/features needed for installing the package"
    type: string
    default: "config/beta-test-scratch-def.json"
  build_wait:
    description: "the time in minutes the version create command waits until to return"
    type: integer
    default: 60
#  email_beta_test:
#    description: "the email for the beta test user"
#    type: string
#    default: "johan.van.den.hoek@appsolutely.nl"
  workspace_root:
    description: the path to the workspace root. This is where the sfdxauth url file will be stored.
    type: string
    default: workspace
  context:
    description: the name of the cirleci context which stores the secret environment variables.
    type: string
    default: signicat_auth_urls
  package_dev_hub_alias:
    description: the default alias for the dev hub to be used for packaging (by default everywhere)
    type: string
    default: devhub
  scratch_org_dev_hub_alias:
    description: the alias for the devhub against which scratch orgs need to be created
    type: string
    default: devhub
  sfdxauthurl_file_name:
    description: the path to the file in which the sfdx auth url will be stored. Relative from the workspace root.
    type: string
    default: scratchorg.sfdxauth_url
  run_hammer_test:
    description: flag indicating the hammer test should be run. For internal use only. Only used by the hammer_test job
    type: boolean
    default: false

commands:
  sync_git_submodules:
    description: command to sync submodules. Shouldn't do anything if you don't use submodules. Used whenever pushing unpackaged code to a scratch org or when creating a new package version
    steps:
      - run:
          name: init submodules
          command: |
            git submodule sync
            git submodule update --init

  finish_job:
    description: run this at the end of a job. Stores metadata artifacts and sfdx log as artifacts and reports slack status of job.
    parameters:
      notify_slack_on_failure_only:
        description: Set this to true to ensure that notifications are ONLY send to the default slack channel if the build fails
        type: boolean
        default: true
    steps:
      - run:
          name: Compress Metadata Artifacts
          when: always
          command: |
            if [ -d "/root/project/metadata" ]
            then
              tar -cvf metadata.tar /root/project/metadata
            fi
      - run:
          name: Compress sfdx log
          when: always
          command: |
            if [ -f "/root/.sfdx/sfdx.log" ]
            then
              tar -cvf sfdx_log.tar /root/.sfdx/sfdx.log
            fi
      - store_artifacts:
          path: metadata.tar
          destination: metadata
      - store_artifacts:
          path: sfdx_log.tar
          destination: sfdx-log
      - report_slack_status:
          fail_only: << parameters.notify_slack_on_failure_only >>

  log_into_devhub:
    description: short hand for logging into the default devhub
    steps:
      - log_into_org:
          sfdx_url: $DEVHUB_SFDX_AUTH_URL
          alias: << pipeline.parameters.scratch_org_dev_hub_alias >>

  log_into_org:
    description: logs in into the devhub using the sfdx url in the given file
    parameters:
      sfdx_url:
        description: the sfdx url to be used when logging in. Only used if sfdx_url_file is not set
        type: string
      working_directory:
        description: the working dir from which to operate this command
        type: string
        default: ./
      alias:
        description: the alias to be given to the org we login
        type: string
      default_devhub:
        description: |
          flag. Empty string if this should not be used as default devhub. If not empty, the alias is used as default
          devhub.
        type: string
        default: "true"
    steps:
      - run:
          name: login into org
          working_directory: << parameters.working_directory >>
          command: |
            login_file=login.txt
            echo << parameters.sfdx_url >> > $login_file
            if [ -n << parameters.default_devhub >> ]
            then
              devhub_flag="-d"
            fi
            sfdx auth:sfdxurl:store -f $login_file $devhub_flag -a << parameters.alias >>
            rm $login_file

  create_user:
    description: creates a user and stores the credentials and login in a file. Assumes the user is logged in into a default dev hub
    parameters:
      org_username:
        description: the username or alias of the org to create users for
        type: string
      alias:
        description: the alias to create
        type: string
      email:
        description: the email address of the newly created user
        type: string
      path_to_user_definition:
        description: the path to the user definition
        type: string
      output_file_name:
        description: the file name to store the credentials of the created user
        type: string
      sfdx_project_directory:
        description: the directory of the sfdx project. Relative to the job's working directory
        type: string
        default: ./
      tmp_dir:
        description: the path of the temp directory containing the created files. Relative to the sfdx project directory
        type: string
        default: tmp
    steps:
      - run:
          name: create user
          working_directory: << parameters.sfdx_project_directory >>
          command: |
            sfdx force:user:create -u << parameters.org_username >> -a << parameters.alias >> -f << parameters.path_to_user_definition >> generatepassword=true email=<< parameters.email >>
            mkdir << parameters.tmp_dir >>
            sfdx force:org:display -u << parameters.alias >> --json | jq '{username: .result.username, password: .result.password, instanceUrl: .result.instanceUrl}' > << parameters.tmp_dir >>/<< parameters.output_file_name >>
            sfdx force:org:display -u << parameters.alias >> --json --verbose | jq -r '.result.sfdxAuthUrl' > << parameters.tmp_dir >>/<< parameters.output_file_name >>.sfdxauthurl
      - store_artifacts:
          path: << parameters.sfdx_project_directory >>/<< parameters.tmp_dir >>
      - run:
          name: delete tmp dir
          working_directory: << parameters.sfdx_project_directory >>
          command: |
            rm -Rf << parameters.tmp_dir >>

  setup_github:
    description: sets everything up so a commit to github can take place.
    parameters:
      username:
        description: github username
        type: string
        default: << pipeline.parameters.github_username >>
      email:
        description: github email. Must be of a github user
        type: string
        default: << pipeline.parameters.github_email >>
    steps:
      - run:
          name: setup github
          command: |
            git config user.email "<< parameters.email >>"
            git config user.name "<< parameters.username >>"
            ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts

  report_slack_status:
    description: reports the status of a job on slack. Overrides the standard Slack orb failure and success messages with our own standards
    parameters:
      fail_only:
        description: true if the slack message only needs to run on failure of the job (and not on success)
        type: boolean
        default: false
      channel_id:
        description: |
          The id of the slack channel the build script reports its progress on. You can easily obtain the Slack channel ID
          by right clicking, and copying a link to the channel. The ID will be visible at the end of the URL.
        type: string
        default: << pipeline.parameters.default_slack_channel_id >>
    steps:
      - slack/notify:
          event: fail
          channel: << parameters.channel_id >>
          template: basic_fail_1
      - when:
          condition:
            not: << parameters.fail_only >>
          steps:
            - slack/notify:
                event: pass
                channel: << parameters.channel_id >>
                template: basic_success_1

  create_scratch_org:
    description: Creates a scratch org and stores the sfdx auth url to the workspace
    parameters:
      workspace_root:
        description: the path to the workspace root. This is where the sfdxauth url file will be stored.
        type: string
        default: << pipeline.parameters.workspace_root >>
      sfdxauthurl_file_name:
        description: the path to the file in which the sfdx auth url will be stored. Relative from the workspace root.
        type: string
        default: << pipeline.parameters.sfdxauthurl_file_name >>
      duration:
        description: the number of days the scratch org will be available
        type: integer
        default: 1
      scratch_org_definition_file:
        description: the path to the scratch org definition file to use
        type: string
        default: << pipeline.parameters.packaging_scratch_org_definition_file >>
      set_as_default_scratch_org:
        description: flag to indicate if the scratch org needs to be set to the default scratch org
        type: boolean
        default: true
      namespace_flag:
        description: set this to --nonamespace if you want to create a scratch org without a namespace
        type: string
        default: ""
      wait:
        description: the time in minutes the create command waits before timing out
        type: integer
        default: 10
      alias:
        description: the alias that will be used for the scratch org
        type: string
        default: scratch_org
      sfdx_project_directory:
        description: the directory of the sfdx project. Relative to the job's working directory
        type: string
        default: ./
      ancestor:
        description: |
          Flag. Set to true if the scratch org needs to be created with the ancestor installed on it.
          False if the code 'just' needs to be tested without knowledge of the ancestor. In general to just run tests it is
          not necessary to take into account the ancestor. If true, the dev hub to create the scratch orgs from must be the
          package devhub since the packages and ancestors are registered against that org. Don't forget to set that or the
          scratch org creation will fail! Set ancestor to any non-empty string to make it true.
        type: string
        default: ""
      packages:
        description: |
          A space seperates list of ids of packages to install on the scratch org.
          The latest package versions with the given branch will be installed. The branch is the CIRCLE_CI_Branch if not configured
          Package versions on which the given package versions depent will also be installed.
        type: string
        default: ""
      package_versions:
        description: |
          a space seperates list of ids of package versions to install on the scratch org.
          Package versions on which the given package versions depent will also be installed.
        type: string
        default: ""
      branch:
        description: |
          the package version branch from which the package versions need to be installed. Only used if the
          packages parameter has been defined
        type: string
        default: << pipeline.git.branch >>
      scratch_org_dev_hub_alias:
        description: the alias for the devhub against which scratch orgs need to be created
        type: string
        default: << pipeline.parameters.scratch_org_dev_hub_alias >>
      package_dev_hub_alias:
        description: the alias for the package devhub
        type: string
        default: << pipeline.parameters.package_dev_hub_alias >>
    steps:
      - run:
          name: create scratch org
          working_directory: << parameters.sfdx_project_directory >>
          command: |
            set noancestors
            if [ ! << parameters.ancestor >> ]
            then
              noancestors=--noancestors
            fi
            sfdx force:org:create -f << parameters.scratch_org_definition_file >> $noancestors -d << parameters.duration >> -w << parameters.wait >> << parameters.namespace_flag >> -a << parameters.alias >> -v << parameters.scratch_org_dev_hub_alias >>
      - run:
          name: set countryCode on default user if needed
          working_directory: << parameters.sfdx_project_directory >>
          command: |
            stateAndCountryPickListIndex=$(cat << parameters.scratch_org_definition_file >> | jq '.features | index("StateAndCountryPicklist") | select (.!=null)')
            if [ ! -z "$stateAndCountryPickListIndex" ]
            then
              username=$(sfdx force:user:display -u << parameters.alias >> --json | jq -r .result.username)
              sfdx force:data:record:update -s User -v "CountryCode='BE'" -w "Username='$username'" -u << parameters.alias >>
            fi
      - when:
          condition: << parameters.set_as_default_scratch_org >>
          steps:
            - run:
                name: set default user name alias
                working_directory: << parameters.sfdx_project_directory >>
                command: |
                  sfdx config:set defaultusername=<< parameters.alias >>
      - run:
          name: setup workspace
          command: |
            [ ! -d "<< parameters.workspace_root >>" ] && mkdir -p << parameters.workspace_root >>
      - run:
          name: get sfdxAuthUrl
          working_directory: << parameters.sfdx_project_directory >>
          command: |
            sfdxAuthUrl=$(sfdx force:org:display --verbose --json | jq -r .result.sfdxAuthUrl)
            echo $sfdxAuthUrl > << parameters.sfdxauthurl_file_name >>
      - run:
          name: move sfdx auth url to workspace root
          command: |
            mv -fv << parameters.sfdx_project_directory >>/<< parameters.sfdxauthurl_file_name >> << parameters.workspace_root >>/<< parameters.sfdxauthurl_file_name >>
      - when:
          condition: << parameters.packages >>
          steps:
            - run:
                name: install packages
                command: |
                  source ./.circleci/scripts/install_packages_in_org.sh << parameters.sfdx_project_directory >> << parameters.alias >> "<< parameters.packages >>" << parameters.package_dev_hub_alias >> << parameters.branch >>
      - when:
          condition: << parameters.package_versions >>
          steps:
            - run:
                name: install package versions
                command: |
                  source ./.circleci/scripts/install_package_versions_in_org.sh << parameters.sfdx_project_directory >> << parameters.alias >> "<< parameters.package_versions >>" << parameters.package_dev_hub_alias >>
      - persist_to_workspace:
          root: << parameters.workspace_root >>
          paths:
            - << parameters.sfdxauthurl_file_name >>
      - store_artifacts:
          path: << parameters.workspace_root >>/<< parameters.sfdxauthurl_file_name >>

  log_into_scratch_org:
    description: logs in into a scratch org given the sfdx auth url file. Sfdx Auth URL file should be in the workspace
    parameters:
      sfdxauthurl_file_name:
        description: the path to the file in which the sfdx auth url will be stored. Relative from the workspace root.
        type: string
        default: << pipeline.parameters.sfdxauthurl_file_name >>
      workspace_root:
        description: the path to the workspace root to attach. Only used if attach_workspace is true
        type: string
        default: << pipeline.parameters.workspace_root >>
      attach_workspace:
        description: flag to indicate if the workspace should be attached. Defaults to true. Set to false if already done to ensure the job performs well.
        type: boolean
        default: true
      alias:
        description: the alias of the scratch org
        type: string
        default: scratch_org
      set_as_default_scratch_org:
        description: flag to indicate if the scratch org needs to be set to the default scratch org
        type: boolean
        default: true
      sfdx_project_directory:
        description: the directory of the sfdx project. Relative to the job's working directory
        type: string
        default: ./
    steps:
      - when:
          condition: << parameters.attach_workspace >>
          steps:
            - attach_workspace:
                at: << parameters.workspace_root >>
      - run:
          name: move sfdx auth url to sfdx project dir
          command: |
            mv -fv << parameters.workspace_root >>/<< parameters.sfdxauthurl_file_name >> << parameters.sfdx_project_directory >>/<< parameters.sfdxauthurl_file_name >>
      - run:
          name: log into scratch org
          working_directory: << parameters.sfdx_project_directory >>
          command: |
            sfdx auth:sfdxurl:store -f << parameters.sfdxauthurl_file_name >> -a << parameters.alias >>
      - when:
          condition: << parameters.set_as_default_scratch_org >>
          steps:
            - run:
                name: set default user name alias
                working_directory: << parameters.sfdx_project_directory >>
                command: |
                  sfdx config:set defaultusername=<< parameters.alias >>

# Define the jobs we want to run for this project
jobs:
  run_jest_tests:
    description: Runs the LWC jest tests
    parameters:
      src_dir:
        description: directory from where to run sfdx and other src related commands. Must be a relative path from the working directory of the job (default ~/project)
        type: string
        default: './'
    docker:
      - image: appsolutely/sfdx_circleci_container:latest
    resource_class: small
    steps:
      - checkout
      - run:
          name: install sfdx test
          command: |
            npm install @salesforce/sfdx-lwc-jest -g
      - run:
          name: run jest tests
          working_directory: << parameters.src_dir >>
          command:
            sfdx-lwc-jest -- --passWithNoTests
      - store_test_results:
          path: test-results.xml
      - report_slack_status:
          fail_only: true

  run_apex_tests:
    description: Checks out the metadata, creates a new scratch org with the packaging scratch org def, pushes all metadata and runs all apex tests
    parameters:
      notify_slack_on_failure_only:
        description: Set this to true to ensure that notifications are ONLY send to the default slack channel if the build fails
        type: boolean
        default: true
      keep_scratch_org:
        description: set flag to true to keep the scratch org spun up in this job (only if job succeeds)
        type: boolean
        default: false
      sfdx_project_directory:
        description: directory from where to run sfdx and other src related commands. Must be a relative path from the working directory of the job (default ~/project)
        type: string
        default: './'
      packages:
        description: a space seperates list of ids of packages to install on the scratch org. The latest package versions with the given branch will be installed. The branch is the CIRCLE_CI_Branch if not configured
        type: string
        default: ""
      branch:
        description: the package version branch from which the package versions need to be installed.
        type: string
        default: << pipeline.git.branch >>
      scratch_org_definition_file:
        description: the path to the scratch org definition file to use. Relative from the sfdx_project_directory
        type: string
        default: << pipeline.parameters.packaging_scratch_org_definition_file >>
      sfdxauthurl_file_name:
        description: the path to the file in which the sfdx auth url of the scratch org will be stored. Relative from the workspace root.
        type: string
        default: << pipeline.parameters.sfdxauthurl_file_name >>
      namespace_flag:
        description: set this to --nonamespace if you want to create a scratch org without a namespace
        type: string
        default: ""
      prescript:
        description: |
          Script to run before pushing the source code to the org but after creating the org. Handy to copy code or prepare code.
          The parameter must contain a relative path to the script from the sfdx project directory.
        type: string
        default: ""
      push_after_prescript:
        description: |
          Flag. If true and if a prescript is given, all changed code will be committed and pushed to the current remote branch
        type: boolean
        default: true
      ancestor:
        description: |
          Flag. Set to true if the scratch org needs to be created with the ancestor installed on it.
          False if the code 'just' needs to be tested without knowledge of the ancestor. In general to just run tests it is
          not necessary to take into account the ancestor. If true, the dev hub to create the scratch orgs from will be the
          package devhub since the packages and ancestors are registered against that org. Set ancestor to any non-empty string to make it true.
        type: string
        default: ""
    docker:
      - image: appsolutely/sfdx_circleci_container:latest
    resource_class: small
    steps:
      - checkout
      - sync_git_submodules
      - log_into_org:
          sfdx_url: $DEVHUB_SFDX_AUTH_URL
          alias: << pipeline.parameters.package_dev_hub_alias >>
      - when:
          condition: << parameters.prescript >>
          steps:
            - run:
                name: install sfdx test
                working_directory: << parameters.sfdx_project_directory >>
                command: << parameters.prescript >>
      - when:
          condition:
            and:
              - << parameters.prescript >>
              - << parameters.push_after_prescript >>
          steps:
            - run:
                name: push code touched by prescript to github
                working_directory: << parameters.sfdx_project_directory >>
                command: |
                  git add -A
                  git diff-index --quiet HEAD || git commit -m "Committing code touched by prescript in job $CIRCLE_JOB [skip ci]"
                  git push --set-upstream --follow-tags origin $CIRCLE_BRANCH
      - create_scratch_org:
          sfdx_project_directory: << parameters.sfdx_project_directory >>
          scratch_org_definition_file: << parameters.scratch_org_definition_file >>
          namespace_flag: << parameters.namespace_flag >>
          packages: << parameters.packages >>
          branch: << parameters.branch >>
          sfdxauthurl_file_name: << parameters.sfdxauthurl_file_name >>
          ancestor: << parameters.ancestor >>
      - run:
          name: push source to scratch org
          working_directory: << parameters.sfdx_project_directory >>
          no_output_timeout: 30m
          command:
            sfdx force:source:push -f
      - run:
          name: run apex tests
          working_directory: << parameters.sfdx_project_directory >>
          no_output_timeout: 60m
          command: |
            mkdir -p tests/junit
            sfdx force:apex:test:run -d tests/junit -r=junit -w 20
      - store_test_results:
          path: << parameters.sfdx_project_directory >>/tests/junit
      - run:
          name: failed job, deleting scratch org
          when: on_fail
          working_directory: << parameters.sfdx_project_directory >>
          command: |
            sfdx force:org:delete -p
      - run:
          name: delete scratch org
          when: on_success
          working_directory: << parameters.sfdx_project_directory >>
          command: |
            if ! << parameters.keep_scratch_org >>
            then
              echo 'deleting scratch org on which apex tests have been run'
              sfdx force:org:delete -p
            fi
      - finish_job:
          notify_slack_on_failure_only: << parameters.notify_slack_on_failure_only >>

  create_package_version:
    description: checks out the metadata and creates a new package version and tags it in github.
    parameters:
      package:
        description: the package alias or package id for which a package version needs to be created
        type: string
        default: << pipeline.parameters.default_packageid >>
      skipvalidation:
        description: --skipvalidation if validation needs to be skipped when creating a new beta package. Otherwise empty (default)
        default: ""
        type: string
      codecoverage:
        description: -c if codecoverage is needed (default). Make empty if no code coverage is needed
        default: -c
        type: string
      wait:
        description: the time to wait until the package create command returns in minutes.
        default: 60
        type: integer
      notify_slack_on_failure_only:
        description: Set this to true to ensure that notifications are ONLY send to the default slack channel if the build fails
        type: boolean
        default: true
      sfdx_project_directory:
        description: directory from where to run sfdx and other src related commands. Must be a relative path from the working directory of the job (default ~/project)
        type: string
        default: './'
      package_dev_hub_alias:
        description: the alias for the package devhub
        type: string
        default: << pipeline.parameters.package_dev_hub_alias >>
      packaging_scratch_org_definition_file:
        description: the path to the scratch org definition file to be used to create the package
        type: string
        default: << pipeline.parameters.packaging_scratch_org_definition_file >>
      prescript:
        description: |
          Script to run before pushing the source code to the org but after creating the org. Handy to copy code or prepare code.
          The parameter must contain a relative path to the script from the sfdx project directory.
        type: string
        default: ""
      push_after_prescript:
        description: |
          Flag. If true and if a prescript is given, all changed code will be committed and pushed to the current remote branch
        type: boolean
        default: true
      build_package:
        description: |
          Flag. If true (default) build the package. Otherwise skip it. Handy for debug purposes.
        type: boolean
        default: true
    docker:
      - image: appsolutely/sfdx_circleci_container:latest
    resource_class: small
    steps:
      - checkout
      - sync_git_submodules
      - log_into_org:
          sfdx_url: $DEVHUB_SFDX_AUTH_URL
          alias: << parameters.package_dev_hub_alias >>
      - setup_github
      - when:
          condition: << parameters.prescript >>
          steps:
            - run:
                name: install sfdx test
                working_directory: << parameters.sfdx_project_directory >>
                command: << parameters.prescript >>
      - when:
          condition:
            and:
              - << parameters.prescript >>
              - << parameters.push_after_prescript >>
          steps:
            - run:
                name: push code touched by prescript to github
                working_directory: << parameters.sfdx_project_directory >>
                command: |
                  git add -A
                  git diff-index --quiet HEAD || git commit -m "Committing code touched by prescript in job $CIRCLE_JOB [skip ci]"
                  git pull origin $CIRCLE_BRANCH --no-commit && git diff-index --quiet HEAD || git commit -m "Merge [skip ci]"
                  git push --set-upstream --follow-tags origin $CIRCLE_BRANCH
      - when:
          condition: << parameters.build_package >>
          steps:
            - run:
                name: create package version
                working_directory: << parameters.sfdx_project_directory >>
                no_output_timeout: 1.5h
                command: |
                  sfdx force:package:version:create --package << parameters.package >> --targetdevhubusername << parameters.package_dev_hub_alias >> --definitionfile << parameters.packaging_scratch_org_definition_file >> << parameters.codecoverage >> -x --wait << parameters.wait >> --tag "commit: $CIRCLE_SHA1" --branch "$CIRCLE_BRANCH" << parameters.skipvalidation >>
                  git add sfdx-project.json
                  git diff-index --quiet HEAD || git commit -m "Adding new package version to sfdx-project.json [skip ci]"
                  git pull origin $CIRCLE_BRANCH --no-commit && git diff-index --quiet HEAD || git commit -m "Merge origin [skip ci]"
                  git push --set-upstream --follow-tags origin $CIRCLE_BRANCH
      - run:
          name: Tag git with version
          working_directory: << parameters.sfdx_project_directory >>
          command: |
            packageversionidjson=$(sfdx force:data:soql:query -q "SELECT Id,Package2Id,SubscriberPackageVersionId,IsReleased,MajorVersion,MinorVersion,PatchVersion,BuildNumber,CreatedDate FROM Package2Version WHERE Package2Id='<< parameters.package >>' AND Branch='$CIRCLE_BRANCH' AND IsReleased=FALSE ORDER BY CreatedDate DESC LIMIT 1" -t --json -u << parameters.package_dev_hub_alias >>)
            echo 'package version id json' $packageversionidjson
            packageversionid=$( echo $packageversionidjson | jq -r '.result.records[0].SubscriberPackageVersionId')
            echo 'packageversionid ' $packageversionid
            majorversion=$( echo $packageversionidjson | jq -r '.result.records[0].MajorVersion')
            minorversion=$( echo $packageversionidjson | jq -r '.result.records[0].MinorVersion')
            patchversion=$( echo $packageversionidjson | jq -r '.result.records[0].PatchVersion')
            buildnumber=$( echo $packageversionidjson | jq -r '.result.records[0].BuildNumber')
            tag=$CIRCLE_BRANCH_$majorversion.$minorversion.$patchversion.$buildnumber
            echo 'Tag: '$tag
            source ./.circleci/scripts/tag_package_version.sh $packageversionid << parameters.package_dev_hub_alias >> $tag
            git pull origin $CIRCLE_BRANCH --no-commit && git diff-index --quiet HEAD || git commit -m "Merge origin [skip ci]"
            git push --set-upstream --follow-tags origin $CIRCLE_BRANCH
      - finish_job:
          notify_slack_on_failure_only: << parameters.notify_slack_on_failure_only >>

  setup_test_org:
    description: creates a scratch org, installs the beta that has as tag the current commit and creates test users
    parameters:
      scratch_org_definition_file:
        description: relative path to the scratch org definition file to be used for the scratch org to install the beta on.
        type: string
        default: << pipeline.parameters.beta_test_scratch_org_definition_file >>
      scratch_org_duration:
        description:  duration of the scratch org (in days) (default:3, min:1, max:30)
        type: integer
        default: 3
      install_wait_time:
        description: number of minutes to wait for installation status. CircleCI will continue the build process after this time and if the installation is not finished the next steps will fail so ensure this is large enough.
        type: integer
        default: 30
      publish_wait_time:
        description: number of minutes to wait for subscriber package version ID to become available in the scratch org to install the package into. If the package is not available the build will fail.
        type: integer
        default: 5
      notify_slack_on_failure_only:
        description: true if the slack message only needs to be displayed on success. But here it is false ;-)
        type: boolean
        default: false
    docker:
      - image: appsolutely/sfdx_circleci_container:latest
    resource_class: small
    steps:
      - checkout
      - log_into_devhub
      - run:
          name: create beta test scratch org
          command: |
            sfdx force:org:create -s -f << parameters.scratch_org_definition_file >> -d << parameters.scratch_org_duration >> -w 10 -a beta-test --nonamespace
      - run:
          name: install
          command: |
            packageversionid=$(sfdx force:package:version:list  --verbose --json | jq -r --arg TAG "commit: $CIRCLE_SHA1" --arg BRANCH "$CIRCLE_BRANCH" '.result | .[] | select(.Tag==$TAG) | [select(.Branch==$BRANCH)] | last | .SubscriberPackageVersionId')
            sfdx force:package:install --package $packageversionid --noprompt --publishwait << parameters.publish_wait_time >> -w << parameters.install_wait_time >>
#      - create_user:
#          org_username: beta-test
#          alias: test-admin
#          email: << pipeline.parameters.email_beta_test >>
#          path_to_user_definition: config/companyinfo-admin-user-def.json
#          output_file_name: test-admin-credentials.txt
#      - create_user:
#          org_username: beta-test
#          alias: test-sales
#          email: << pipeline.parameters.email_beta_test >>
#          path_to_user_definition: config/companyinfo-sales-user-def.json
#          output_file_name: test-sales-credentials.txt
      - run:
          name: delete scratch org
          when: on_fail
          command: |
            sfdx force:org:delete
      - finish_job:
          notify_slack_on_failure_only: << parameters.notify_slack_on_failure_only >>

  promote_package:
    description: promotes the given package version if there is no promoted version yet
    parameters:
      notify_slack_on_failure_only:
        description: Set this to true to ensure that notifications are ONLY send to the default slack channel if the build fails
        type: boolean
        default: true
      sfdx_project_directory:
        description: directory from where to run sfdx and other src related commands. Must be a relative path from the working directory of the job (default ~/project)
        type: string
        default: './'
      package_id:
        description: the package id of the package to promote and test
        type: string
        default: << pipeline.parameters.default_packageid >>
      branch:
        description: the package version branch from which we need to promote a leaf
        type: string
        default: develop
      version_major:
        description: the major version number of the package to promote. If not specified the latest created version from the branch that has not been promoted yet will be used
        type: string
        default: ""
      version_minor:
        description: |
          the minor version number of the package to promote.
          If not specified the latest created version from the branch that has not been promoted yet will be used.
          If version_major is not specified this param will be neclected.
        type: string
        default: ""
      patch_number:
        description: |
          the minor version number of the package to promote.
          If not specified the latest created version from the branch that has not been promoted yet will be used.
          If version_major is not specified this param will be neclected.
        type: string
        default: ""
      package_dev_hub_alias:
        description: the alias for the package devhub
        type: string
        default: << pipeline.parameters.package_dev_hub_alias >>
      promote_package:
        description: flag to indicate if the package really should be promoted. For debug purposes.
        type: boolean
        default: true
    docker:
      - image: appsolutely/sfdx_circleci_container:latest
    resource_class: small
    steps:
      - checkout
      - sync_git_submodules
      - setup_github
      - log_into_org:
          sfdx_url: $DEVHUB_SFDX_AUTH_URL
          alias: << parameters.package_dev_hub_alias >>
      - when:
          condition: << parameters.promote_package >>
          steps:
            - run:
                name: promote package
                working_directory: << parameters.sfdx_project_directory >>
                command: |
                  source ./.circleci/scripts/get_package_version_id_to_promote.sh
                  package_version_id=$(get_package_version_id_to_promote << parameters.package_id >> << parameters.branch >> << parameters.package_dev_hub_alias >> << parameters.version_major >> << parameters.version_minor >> << parameters.patch_number >>)
                  sfdx force:package:version:promote --package "$package_version_id" --noprompt --targetdevhubusername << parameters.package_dev_hub_alias >>
      - run:
          name: tag package
          working_directory: << parameters.sfdx_project_directory >>
          command: |
            query="WHERE Package2Id='<< parameters.package_id >>' AND IsReleased=TRUE AND IsDeprecated=FALSE ORDER BY CreatedDate DESC LIMIT 1"
            package_versions_json=$(sfdx force:data:soql:query -q "SELECT SubscriberPackageVersionId,MajorVersion,MinorVersion,PatchVersion,HasPassedCodeCoverageCheck FROM Package2Version $query" -t --json -u << parameters.package_dev_hub_alias >>)
            package_version_id=$(echo $package_versions_json | jq -r '.result.records | .[0].SubscriberPackageVersionId')
            echo "Package version Id: $package_version_id"
            version=${CIRCLE_BRANCH#*$release/}
            echo "Version release candidate: $version"
            sfdx force:package:version:update -p $package_version_id -b release -t $version
      - finish_job:
          notify_slack_on_failure_only: << parameters.notify_slack_on_failure_only >>

  tag_repo_with_version:
    description: |
      tags the repo with the version number of the latest released package version of the given package. Only call sequentially in workflow!
      Doesn't do anythin if the tag is already present to make the script fault proof.
    parameters:
      notify_slack_on_failure_only:
        description: Set this to true to ensure that notifications are ONLY send to the default slack channel if the build fails
        type: boolean
        default: true
      sfdx_project_directory:
        description: directory from where to run sfdx and other src related commands. Must be a relative path from the working directory of the job (default ~/project)
        type: string
        default: './'
      package_id:
        description: the package id of the package the version number will be taken from
        type: string
        default: << pipeline.parameters.default_packageid >>
    docker:
      - image: appsolutely/sfdx_circleci_container:latest
    resource_class: small
    steps:
      - checkout
      - sync_git_submodules
      - setup_github
      - log_into_org:
          sfdx_url: $DEVHUB_SFDX_AUTH_URL
          alias: << pipeline.parameters.package_dev_hub_alias >>
      - run:
          name: tag repo
          working_directory: << parameters.sfdx_project_directory >>
          command: |
            query="WHERE Package2Id='<< parameters.package_id >>' AND IsReleased=TRUE AND IsDeprecated=FALSE ORDER BY CreatedDate DESC LIMIT 1"
            package_versions_json=$(sfdx force:data:soql:query -q "SELECT SubscriberPackageVersionId,MajorVersion,MinorVersion,PatchVersion,HasPassedCodeCoverageCheck FROM Package2Version $query" -t --json -u << pipeline.parameters.package_dev_hub_alias >>)
            package_version_id=$(echo $package_versions_json | jq -r '.result.records | .[0].SubscriberPackageVersionId')
            echo "Package version Id: $package_version_id"
            version=${CIRCLE_BRANCH#*$release/}
            echo "Version release candidate: $version"
            gittags=$(git tag)
            if [[ ! $gittags == *"$tag"* ]]
            then
              git tag -a $tag -m "tagging with ${tag} [skip ci]"
              git push --set-upstream --follow-tags origin $CIRCLE_BRANCH
            fi
      - finish_job:
          notify_slack_on_failure_only: << parameters.notify_slack_on_failure_only >>

  install_packages:
    description: |
      installs the latest released packages on the given org. If the packages given have dependencies, the dependencies will
      be installed first
    parameters:
      sfdx_auth_url:
        description: the sfdx URL of the org on which the package needs to be installed
        type: string
      packages:
        description: the package ids formatted as array (so as (<packageid> <packageid>) ) of the packges that need to be installed
        type: string
      sfdx_project_directory:
        description: directory from where to run sfdx and other src related commands. Must be a relative path from the working directory of the job (default ~/project)
        type: string
        default: './'
      notify_slack_on_failure_only:
        description: Set this to true to ensure that notifications are ONLY send to the default slack channel if the build fails
        type: boolean
        default: true
    docker:
      - image: appsolutely/sfdx_circleci_container:latest
    resource_class: small
    steps:
      - checkout
      - log_into_org:
          sfdx_url: $DEVHUB_SFDX_AUTH_URL
          alias: << pipeline.parameters.package_dev_hub_alias >>
      - log_into_org:
          sfdx_url: << parameters.sfdx_auth_url >>
          alias: target_org
      - run:
          name: get package versions and install
          command: |
            packages=<< parameters.packages >>
            source ./.circleci/scripts/install_latest_release_in_org.sh << parameters.sfdx_project_directory >> target_org $packages << pipeline.parameters.package_dev_hub_alias >>
      - finish_job:
          notify_slack_on_failure_only: << parameters.notify_slack_on_failure_only >>

  release:
    parameters:
      notify_slack_on_failure_only:
        description: Set this to true to ensure that notifications are ONLY send to the default slack channel if the build fails
        type: boolean
        default: false
      sfdx_project_directory:
        description: directory from where to run sfdx and other src related commands. Must be a relative path from the working directory of the job (default ~/project)
        type: string
        default: './'
      package_id:
        description: the package id of the package to promote and test
        type: string
        default: << pipeline.parameters.default_packageid >>
      package_dev_hub_alias:
        description: the alias for the package devhub
        type: string
        default: << pipeline.parameters.package_dev_hub_alias >>
    docker:
      - image: appsolutely/sfdx_circleci_container:latest
    resource_class: small
    steps:
      - checkout
      - setup_github
      - run:
          name: merge release into develop
          command: |
            git fetch
            git checkout develop
            git merge $CIRCLE_BRANCH -m "Merging release branch $CIRCLE_BRANCH into develop [skip ci]"
            git push origin develop
      - run:
          name: merge release into master
          command: |
            git fetch
            git checkout master
            git merge $CIRCLE_BRANCH -m "Merging release branch $CIRCLE_BRANCH into master [skip ci]"
            git push origin master
      - run:
          name: delete release branch
          command: |
            git branch -d $CIRCLE_BRANCH
            git push origin --delete $CIRCLE_BRANCH
      - run:
          name: update branch to master
          command: |
            query="WHERE Package2Id='<< parameters.package_id >>' AND IsReleased=TRUE AND IsDeprecated=FALSE ORDER BY CreatedDate DESC LIMIT 1"
            package_versions_json=$(sfdx force:data:soql:query -q "SELECT SubscriberPackageVersionId,MajorVersion,MinorVersion,PatchVersion,HasPassedCodeCoverageCheck FROM Package2Version $query" -t --json -u << parameters.package_dev_hub_alias >>)
            package_version_id=$(echo $package_versions_json | jq -r '.result.records | .[0].SubscriberPackageVersionId')
            echo "Package version Id: $package_version_id"
            sfdx force:package:version:update -p $package_version_id -b master
      - finish_job:
          notify_slack_on_failure_only: << parameters.notify_slack_on_failure_only >>

  trigger_hammer_test:
    description: |
      Triggers the hammer test. The hammer test cannot be called directly because the CircleCI user runs in 'anonymous' mode
      and cannot access the << pipeline.parameters.context >> context
    docker:
      - image: appsolutely/sfdx_circleci_container:latest
    resource_class: small
    steps:
      - run:
          name: Start hammer test
          command: |
            echo $CIRCLE_PROJECT_USERNAME
            echo $CIRCLE_PROJECT_REPONAME
            github_url=<<pipeline.project.git_url>>
            project_slug=${github_url#*https://github.com/}
            echo $project_slug
            echo $CIRCLE_TOKEN
            curl --request POST \
              --url https://circleci.com/api/v2/project/gh/$project_slug/pipeline \
              --header 'Accept: text/plain' \
              --header "Circle-Token: $CIRCLE_TOKEN" \
              --header 'content-type: application/json' \
              --data '{"branch":"'$CIRCLE_BRANCH'","parameters":{"run_hammer_test":true}}'

  hammer_test:
    description: |
      Executes a hammer test. Tries to build a beta package with a scratch org def file that is on the preview release.
      If the preview is not yet available the build command will return status code 1 and an error message
      "The release specified for the package version was invalid. Release : PREVIEW."
    parameters:
      package:
        description: the package alias or package id for which a package version needs to be created
        type: string
        default: << pipeline.parameters.default_packageid >>
      wait:
        description: the time to wait until the package create command returns in minutes.
        default: 60
        type: integer
      sfdx_project_directory:
        description: directory from where to run sfdx and other src related commands. Must be a relative path from the working directory of the job (default ~/project)
        type: string
        default: './'
      package_dev_hub_alias:
        description: the alias for the package devhub
        type: string
        default: << pipeline.parameters.package_dev_hub_alias >>
      packaging_scratch_org_definition_file:
        description: the path to the scratch org definition file to be used to create the package
        type: string
        default: << pipeline.parameters.preview_packaging_scratch_org_definition_file >>
      hammertest_branch:
        description: the sfdx branch on which all hammertest packages are created
        type: string
        default: hammertest
      hammer_test_slack_channel_id:
        description: |
          The id of the slack channel on which to report the hammer test results. Hammer tests results are reported centrally
          to ensure the results are treated appropriate. You can easily obtain the Slack channel ID
          by right clicking, and copying a link to the channel. The ID will be visible at the end of the URL.
        type: string
        default: << pipeline.parameters.default_hammer_test_slack_channel_id >>
    docker:
      - image: appsolutely/sfdx_circleci_container:latest
    resource_class: small
    steps:
      - checkout
      - sync_git_submodules
      - log_into_org:
          sfdx_url: $DEVHUB_SFDX_AUTH_URL
          alias: << parameters.package_dev_hub_alias >>
      - setup_github
      - run:
          name: increase patch number
          working_directory: << parameters.sfdx_project_directory >>
          command: |

      - run:
          name: execute hammer test (build beta package)
          working_directory: << parameters.sfdx_project_directory >>
          no_output_timeout: 1.5h
          shell: /bin/bash
          command: |
            NOW=$(date)
            RESULT=$(sfdx force:package:version:create --package << parameters.package >> --targetdevhubusername << parameters.package_dev_hub_alias >> --definitionfile << parameters.packaging_scratch_org_definition_file >> -c -x --wait << parameters.wait >> --tag "hammertest $NOW" --branch << parameters.hammertest_branch >> --json)
            STATUS=$(echo $RESULT | jq -r '.status')
            if [ $STATUS = 1 ]
            then
              MESSAGE==$(echo $RESULT | jq -r '.message')
              if [[ $MESSAGE == *"PREVIEW"* ]]; then
                echo "Preview not available!"
                exit 0
              else
                echo "Failure building package on preview org!"
                exit 1
              fi
            fi
            git add sfdx-project.json
            git diff-index --quiet HEAD || git commit -m "Adding new package version to sfdx-project.json for hammertest on $NOW [skip ci]"
            git pull origin $CIRCLE_BRANCH --no-commit && git diff-index --quiet HEAD || git commit -m "Merge origin [skip ci]"
            git push --set-upstream --follow-tags origin $CIRCLE_BRANCH
      - run:
          name: Tag git with version
          working_directory: << parameters.sfdx_project_directory >>
          command: |
            packageversionidjson=$(sfdx force:data:soql:query -q "SELECT Id,Package2Id,SubscriberPackageVersionId,IsReleased,MajorVersion,MinorVersion,PatchVersion,BuildNumber,CreatedDate FROM Package2Version WHERE Package2Id='<< parameters.package >>' AND Branch='$CIRCLE_BRANCH' AND IsReleased=FALSE ORDER BY CreatedDate DESC LIMIT 1" -t --json -u << parameters.package_dev_hub_alias >>)
            echo 'package version id json' $packageversionidjson
            packageversionid=$( echo $packageversionidjson | jq -r '.result.records[0].SubscriberPackageVersionId')
            echo 'packageversionid ' $packageversionid
            majorversion=$( echo $packageversionidjson | jq -r '.result.records[0].MajorVersion')
            minorversion=$( echo $packageversionidjson | jq -r '.result.records[0].MinorVersion')
            patchversion=$( echo $packageversionidjson | jq -r '.result.records[0].PatchVersion')
            buildnumber=$( echo $packageversionidjson | jq -r '.result.records[0].BuildNumber')
            tag=<< parameters.hammertest_branch >>_$majorversion.$minorversion.$patchversion.$buildnumber
            echo 'Tag: '$tag
            source ./.circleci/scripts/tag_package_version.sh $packageversionid << parameters.package_dev_hub_alias >> $tag
            git pull origin $CIRCLE_BRANCH --no-commit && git diff-index --quiet HEAD || git commit -m "Merge origin [skip ci]"
            git push --set-upstream --follow-tags origin $CIRCLE_BRANCH
      - slack/notify:
          event: fail
          channel: << parameters.hammer_test_slack_channel_id >>
          custom: |
            {
            	"blocks": [
            		{
            			"type": "header",
            			"text": {
            				"type": "plain_text",
            				"text": "HAMMERTEST FAILED. :warning:",
            				"emoji": true
            			}
            		},
                    {
            			"type": "divider"
            		},
            		{
            			"type": "section",
            			"fields": [
            				{
            					"type": "mrkdwn",
            					"text": "*Project*: \n$CIRCLE_PROJECT_REPONAME"
            				},
            				{
            					"type": "mrkdwn",
            					"text": "*Branch*: \n$CIRCLE_BRANCH"
            				}
            			]
            		},
            		{
            			"type": "actions",
            			"elements": [
            				{
            					"type": "button",
            					"text": {
            						"type": "plain_text",
            						"text": "View Job"
            					},
            					"url": "https://google.com"
            				}
            			]
            		}
            	]
            }
          template: ""

# Orchestrate our job run sequence
workflows:
  version: 2
  feature:
    jobs:
      - run_apex_tests:
          notify_slack_on_failure_only: false
          context:
            - org-global
            - << pipeline.parameters.context >>
          filters:
            branches:
              only: /feature\/.*/

  develop:
    jobs:
      - create_package_version:
          context:
            - org-global
            - << pipeline.parameters.context >>
          name: create_managed_package
          codecoverage: -c
          filters:
            branches:
              only:
                - develop
      - setup_test_org:
          notify_slack_on_failure_only: false
          context:
            - org-global
            - << pipeline.parameters.context >>
          requires:
            - create_managed_package

  trigger_hammer_test:
    triggers:
      - schedule:
          cron: "0 0 * * 5"
          filters:
            branches:
              only:
                - master
    jobs:
      - trigger_hammer_test:
          context:
            - org-global

  hammer_test:
    when: << pipeline.parameters.run_hammer_test >>
    jobs:
      - hammer_test:
          context:
            - << pipeline.parameters.context >>

  release:
    jobs:
      - promote_package:
          name: promote_managed_package
          context:
            - org-global
            - << pipeline.parameters.context >>
          promote_package: true
          package_id: << pipeline.parameters.default_packageid >>
          filters:
            branches:
              only: /release\/.*/
      - tag_repo_with_version:
          name: tag repo with new release
          context:
            - org-global
            - << pipeline.parameters.context >>
          package_id: << pipeline.parameters.default_packageid >>
          requires:
            - promote_managed_package
      - install_packages:
          name: install_on_UAT
          context:
            - org-global
            - << pipeline.parameters.context >>
          sfdx_auth_url: $UAT_SFDX_AUTH_URL
          packages: (<< pipeline.parameters.default_packageid >>)
          requires:
            - promote_managed_package
      - slack/on-hold:
          context:
            - org-global
          channel: << pipeline.parameters.default_slack_channel_id >>
          requires:
            - install_on_UAT
      - approve_install_on_security_review_org:
          type: approval
          requires:
            - install_on_UAT
      - install_packages:
          name: install on security review org
          context:
            - org-global
            - << pipeline.parameters.context >>
          sfdx_auth_url: $SEC_REVIEW_SFDX_AUTH_URL
          packages: (<< pipeline.parameters.default_packageid >>)
          requires:
            - approve_install_on_security_review_org
      - slack/on-hold:
          context:
            - org-global
          channel: << pipeline.parameters.default_slack_channel_id >>
          requires:
            - install_on_UAT
      - approve_release:
          type: approval
          requires:
            - install_on_UAT
      - release:
          notify_slack_on_failure_only: false
          context:
            - org-global
            - << pipeline.parameters.context >>
          requires:
            - approve_release
      - install_packages:
          name: install on demo
          context:
            - org-global
            - << pipeline.parameters.context >>
          sfdx_auth_url: $DEMO_SFDX_AUTH_URL
          packages: (<< pipeline.parameters.default_packageid >>)
          requires:
            - release


